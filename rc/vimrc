" "
"my ~/.vimrc config
"several tips from: http://vimbits.com/
"

"auto reload vimrc on save without bog-down for duplicated autocmds "credits: https://gist.github.com/nocash/1988620
augroup AutoReloadVimRC
  au!
  "automatically reload vimrc when it's saved "credits: http://vimbits.com/bits/128
  au BufWritePost .vimrc so ~/.vimrc
augroup END

set nocompatible                  " Must come first because it changes other options.
set formatoptions-=cro            " Turn AutoComment on next line
set modeline

syntax enable                     " Turn on syntax highlighting.
filetype off                      " required!

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set tabstop=2                    " Global tab width.
set softtabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

colorscheme zenburn " could type ':color <_TAB_>' to weigh options
highlight LiteralTabs ctermbg=darkgreen guibg=darkgreen
match LiteralTabs /\s\  /        " Actual TABS
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$/    " Trailing Spaces

au BufRead,BufNewFile *.pp       set filetype=puppet

autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd BufRead *.py set nocindent
autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``

au! BufRead,BufNewFile *.json set filetype=json
augroup json_autocmd
  autocmd!
  autocmd FileType json set autoindent
  autocmd FileType json set formatoptions=tcq2l
  autocmd FileType json set textwidth=78 shiftwidth=2
  autocmd FileType json set softtabstop=2 tabstop=8
  autocmd FileType json set expandtab
  autocmd FileType json set foldmethod=syntax
augroup END

autocmd FileType ruby setlocal foldmethod=syntax
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

command! FRB set filetype=ruby
command! FPY set filetype=python

map <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

"reselect visual block after indent/outdent "credits: http://vimbits.com/bits/20
vnoremap < <gv
vnoremap > >gv

"easy split nav "credits: http://vimbits.com/bits/10
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" press leader + tab to move through split windows
nmap <Leader><tab> <C-w>w
nmap <Leader><up> <C-w>k
nmap <Leader><down> <C-w>j
nmap <Leader><left> <C-w>h
nmap <Leader><right> <C-w>l

nmap <Leader>] :tabnext
nmap <Leader>[ :tabprevious

" select all "credits: http://vimbits.com/bits/82
map <Leader>a ggVG

" 80 characters line coloring "credits: http://vimbits.com/bits/13
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Highlight word at cursor without changing position "credits: http://vimbits.com/bits/19
nnoremap <Leader>hl *<C-O>
" Highlight word at cursor and then Ack it.
nnoremap <Leader>ack *<C-O>:AckFromSearch!<CR>

" Disable stupid backup and swap files - they trigger too many events for file system watchers
set nobackup
set nowritebackup
set noswapfile

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle-ified
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" vim +BundleInstall +qall
" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My bundles here:
"
" original repos on GitHub
Bundle 'tpope/vim-fugitive'


"Bundle 'Lokaltog/vim-easymotion'
"Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
"Bundle 'tpope/vim-rails.git'
" vim-scripts repos
"Bundle 'L9'
"Bundle 'FuzzyFinder'
" non-GitHub repos
"Bundle 'git://git.wincent.com/command-t.git'
" Git repos on your local machine (i.e. when working on your own plugin)
"Bundle 'file:///Users/gmarik/path/to/plugin'
" ...
"Bundle 'tpope/vim-surround'
"Bundle 'tpope/vim-git'
"Bundle 'mileszs/ack.vim'
"Bundle 'sjl/gundo.vim'
"Bundle 'vim-scripts/The-NERD-tree'
"Bundle 'plasticboy/vim-markdown'
"Bundle 'scrooloose/syntastic'
"Bundle 'tpope/vim-rvm'
"Bundle 'vim-ruby/vim-ruby'
"Bundle 'vim-scripts/VimClojure'
"Bundle 'vim-scripts/FuzzyFinder'
"Bundle 'Lokaltog/vim-powerline'
"Bundle 'mhinz/vim-startify'
"Bundle 'klen/python-mode'
"Bundle 'elzr/vim-json'
"Bundle 'uggedal/go-vim'


filetype plugin indent on         " required! Turn on file type detection.
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install (update) bundles
" :BundleSearch(!) foo - search (or refresh cache first) for foo
" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed.
