" "
"my ~/.vimrc config
"several tips from: http://vimbits.com/
"

"auto reload vimrc on save without bog-down for duplicated autocmds "credits: https://gist.github.com/nocash/1988620
augroup AutoReloadVimRC
  au!
  "automatically reload vimrc when it's saved "credits: http://vimbits.com/bits/128
  au BufWritePost .vimrc so ~/.vimrc
augroup END

set nocompatible                  " Must come first because it changes other options.
set formatoptions-=cro            " Turn AutoComment on next line
set modeline

syntax enable                     " Turn on syntax highlighting.
filetype off                      " required!
filetype plugin indent off        " required! Turn off file type detection.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set tabstop=2                    " Global tab width.
set softtabstop=2                " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs
set shiftround                   "Round spaces to nearest shiftwidth multiple
set nojoinspaces                 "Don't convert spaces to tabs

let mapleader="\\"

" \y to copy to system clipboard
vnoremap <Leader>y y:call system("xclip -i -selection c", getreg("\""))<CR>

set autochdir

" setting spell
set spell spelllang=en_us
" turn spell off by default
set spell!
set complete+=kspell "use currently active spell checking for completion
"set complete-=t "don't complete tags as 'tags' might grow real large

" set breakat=\

set wildignore+=*.o,*.obj,*.bak,*.exe,*.so,*.dll
set wildignore+=*.zip,*.tar,*.tgz,*.tar.gz,*.gz,*.bzip2,*.7z,*.bz2  "ignore archives
set wildignore+=*.jar,*.war,*.ear,*.sar,*.mar,*.class  "ignore java-isc
set wildignore+=*.swp,*.swo,*~  "ignore temp files
set wildignore+=*.pyc,*.pex       "ignore python-isc
set wildignore+=*.aux,*.out,*.toc "ignore LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif "ignore binary images
set wildignore+=*.luac            "ignore Lua bytecode

set t_Co=256
"colorscheme zenburn " could type ':color <_TAB_>' to weigh options
highlight LiteralTabs ctermbg=darkgreen guibg=darkgreen
match LiteralTabs /\s\  /        " Actual TABS
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$/    " Trailing Spaces
set laststatus=2

augroup filetypedetect
  "au BufNewFile,BufRead .vimrc set filetype=vim
  au BufNewFile,BufRead *.rs set filetype=rust syntax=rust
  au BufNewFile,BufRead *.pig set filetype=pig syntax=pig
  au BufNewFile,BufRead Capfile set filetype=ruby syntax=ruby
  au BufNewFile,BufRead *.thrift set filetype=thrift syntax=thrift
  au BufNewFile,BufRead *.mesos set filetype=python syntax=python
  au BufNewFile,BufRead *BUILD* set filetype=python syntax=python
  au BufRead,BufNewFile *.md set filetype=markdown syntax=markdown
  au BufRead,BufNewFile README set filetype=markdown syntax=markdown
  au BufRead,BufNewFile *.proto set filetype=proto

  au BufRead,BufNewFile *.ml       set filetype=ocaml
  au BufRead,BufNewFile *.hs       set filetype=haskell
  au BufRead,BufNewFile *.pp       set filetype=puppet syntax=puppet
  au BufRead,BufNewFile *.rb       set filetype=ruby syntax=ruby
  au BufRead,BufNewFile *.py       set filetype=python syntax=python
  au BufNewFile,BufRead *.go       set filetype=go syntax=go
  au BufNewFile,BufRead *.sbt      set filetype=scala syntax=scala
  au BufNewFile,BufRead *.js       set filetype=javascript syntax=javascript
augroup EN

autocmd FileType cpp,c,go,haskell,python setlocal expandtab list! tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType java,js,ruby,scala setlocal expandtab list! tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType python setlocal commentstring=#%s "foldmethod=syntax
autocmd FileType css  setlocal shiftwidth=2 tabstop=2 foldmethod=indent

autocmd FileType go setlocal expandtab list! tabstop=4 shiftwidth=4 softtabstop=4 "foldmethod=syntax
autocmd BufRead *.go set smartindent autoindent

autocmd BufRead *.py set cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd BufRead *.py set nocindent smartindent autoindent
autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``

autocmd BufRead,BufNewFile *.json set filetype=json
autocmd FileType json setlocal expandtab autoindent formatoptions=tcq2l
autocmd FileType json setlocal textwidth=78 shiftwidth=2 softtabstop=2 tabstop=8 foldmethod=syntax

command! FRB set filetype=ruby
command! FPY set filetype=python

"" ctags supports: Ant Assembler ASP Awk BASIC BETA C C++ C# COBOL DOS Batch Eiffel
"" Erlang Flex Fortran HTML Java JavaScript Lisp Lua Make MATLAB Objective Caml Pascal
"" Perl PHP PL/SQL Python (Pyrex/Cython) REXX Ruby Scheme Shell scripts (Bourne/Korn/Z)
"" S-Lang SML (Standard ML) Tcl TeX Vera Verilog VHDL Vim YACC
map <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
au BufWritePost *.go silent! !~/.vim/bin/gotags -sort -silent . > /dev/null
"au BufWritePost *.go silent! !ctags -R --fields=+iaS --extra=+q --go-types=fvt .
au BufWritePost *.cpp,*.c,*.h,*.hpp silent! !ctags -R --fields=+iaS --extra=+q .
au BufWritePost *.java,*.xml silent! !ctags -R --fields=+iaS --extra=+q .
au BufWritePost *.py,*.rb silent! !ctags -R --fields=+iaS --extra=+q .
au BufWritePost *.asm,*.awk,*.sh silent! !ctags -R --fields=+iaS --extra=+q .
au BufWritePost *.html,*.js silent! !ctags -R --fields=+iaS --extra=+q .

"reselect visual block after indent/outdent "credits: http://vimbits.com/bits/20
vnoremap < <gv
vnoremap > >gv

"easy split nav "credits: http://vimbits.com/bits/10
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" press leader + tab to move through split windows
nmap <Leader><tab> <C-w>w
nmap <Leader><up> <C-w>k
nmap <Leader><down> <C-w>j
nmap <Leader><left> <C-w>h
nmap <Leader><right> <C-w>l

nmap <Leader>] :tabnext
nmap <Leader>[ :tabprevious

" select all "credits: http://vimbits.com/bits/82
map <Leader>a ggVG

" remove trailing whitespace :NOTRAIL
command! -range=% NOTRAIL mark ` | execute <line1> . ',' . <line2> . 's/\s\+$//' |
normal! ``

" 80 characters line coloring "credits: http://vimbits.com/bits/13
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Highlight word at cursor without changing position "credits: http://vimbits.com/bits/19
nnoremap <Leader>hl *<C-O>
" Highlight word at cursor and then Ack it.
nnoremap <Leader>ack *<C-O>:AckFromSearch!<CR>

" Disable stupid backup and swap files - they trigger too many events for file system watchers
set nobackup
set nowritebackup
set noswapfile

"""""""<pathogen>
call pathogen#infect()
"""""""</pathogen>

"""""""<neocomplete>>
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

"" vim-marching for Clang
let g:marching_clang_command = "/usr/bin/env clang"
let g:marching_enable_neocomplete = 1

"" necoghc for Haskell " Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
"""""""</neocomplete>>

colorscheme PaperColor " could type ':color <_TAB_>' to weigh options
let g:airline_theme='PaperColor'

"""""""<powerline>
set rtp+=$HOME/.virtualenvs/anon/lib/python2.7/site-packages/powerline/bindings/vim
"""""""</powerline>

"""""""<go-vim>
let g:gofmt_command = "goimports"
let g:go_fmt_autosave = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
au FileType go nmap <Leader>r <Plug>(go-rename)
"""""""</go-vim>

"""""""<haskell-vim>
let g:haskell_enable_quantification = 1
let g:haskell_enable_recursivedo = 1
let g:haskell_enable_arrowsyntax = 1
let g:haskell_enable_pattern_synonyms = 1
let g:haskell_enable_typeroles = 1
let g:haskell_enable_static_pointers = 1

au BufWritePost *.hs GhcModCheck
"""""""</haskell-vim>

"""""""<easytags>
"" to jump to tag CTRL+]
"" to jump back CTRL+t

" moving tags to project location, from where vim started to control file size
set tags=./tags,tags;$HOME
"""""""</easytags>

"""""""<tagbar>
" moving tags to project location, from where vim started to control file size
nmap <Leader><F8> :TagbarToggle<CR>

"" .vim/bin/gotags is from 'https://github.com/jstemmer/gotags'
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
      \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

" open all files tagged in project as list
" Netrw Style Listing
let g:netrw_liststyle = 3
nnoremap <Leader><F9> :Tlist<CR><C-W>h<C-W>s:e .<CR><C-W>l:let g:netrw_chgwin=winnr()<CR><C-W>h
"""""""</tagbar>

filetype plugin indent on         " required! Turn on file type detection.
syntax on

""""" CHEATSHEET (keep revising full : http://vim.wikia.com/wiki/Best_Vim_Tips)
"" :Ex     : file explorer note capital Ex
"" \be     : show buffer explorer (requires plugin)
"" :ls     : list of buffers(eg following)
"" :cd ..  : move to parent directory
"" guu     : lowercase line
"" gUU     : uppercase line
"" ~       : invert case (upper->lower; lower->upper) of current character
"" gf      : open file name under cursor (SUPER)
"" ga      : display hex, ascii value of character under cursor
"" g8      : display hex value of utf-8 character under cursor
"" ggg?G   : rot13 whole file
"" xp      : swap next two characters around
"" CTRL-A,CTRL-X : increment, decrement next number on same line as the cursor
"" CTRL-R=5*5    : insert 25 into text
"" =             : (re)indent the text on the current line or on the area selected (SUPER)
"" =%            : (re)indent the current braces { ... }
"" G=gg          : auto (re)indent entire document

