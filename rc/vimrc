" "
"my ~/.vimrc config
"several tips from: http://vimbits.com/
"

"auto reload vimrc on save without bog-down for duplicated autocmds "credits: https://gist.github.com/nocash/1988620
augroup AutoReloadVimRC
  au!
  "automatically reload vimrc when it's saved "credits: http://vimbits.com/bits/128
  au BufWritePost .vimrc so ~/.vimrc
augroup END

"set nocompatible                  " Must come first because it changes other options.
set formatoptions-=cro            " Turn AutoComment on next line
set modeline

syntax enable                     " Turn on syntax highlighting.
filetype off                      " required!
filetype plugin indent off        " required! Turn off file type detection.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.
set nocursorcolumn                " speed up syntax highlighting

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set tabstop=2                    " Global tab width.
set softtabstop=2                " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs
set shiftround                   "Round spaces to nearest shiftwidth multiple
set nojoinspaces                 "Don't convert spaces to tabs

set relativenumber
command! NOREL set norelativenumber
command! NORELNO set relativenumber

let mapleader="\\"

" \y to copy to system clipboard
vnoremap <Leader>y y:call system("xclip -i -selection c", getreg("\""))<CR>

set autochdir

" setting spell
set spell spelllang=en_us
" turn spell off by default
set spell!
set complete+=kspell "use currently active spell checking for completion
"set complete-=t "don't complete tags as 'tags' might grow real large

" set breakat=\

set wildignore+=*.o,*.obj,*.bak,*.exe,*.so,*.dll
set wildignore+=*.zip,*.tar,*.tgz,*.tar.gz,*.gz,*.bzip2,*.7z,*.bz2  "ignore archives
set wildignore+=*.jar,*.war,*.ear,*.sar,*.mar,*.class  "ignore java-isc
set wildignore+=*.swp,*.swo,*~  "ignore temp files
set wildignore+=*.pyc,*.pex       "ignore python-isc
set wildignore+=*.aux,*.out,*.toc "ignore LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif "ignore binary images
set wildignore+=*.luac            "ignore Lua bytecode

set t_Co=256
"colorscheme zenburn " could type ':color <_TAB_>' to weigh options
highlight LiteralTabs ctermbg=darkgreen guibg=darkgreen
match LiteralTabs /\s\  /        " Actual TABS
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$/    " Trailing Spaces
set laststatus=2

augroup filetypedetect
  "au BufNewFile,BufRead .vimrc set filetype=vim
  au BufNewFile,BufRead *.rs set filetype=rust syntax=rust
  au BufNewFile,BufRead *.pig set filetype=pig syntax=pig
  au BufNewFile,BufRead Capfile set filetype=ruby syntax=ruby
  au BufNewFile,BufRead *.thrift set filetype=thrift syntax=thrift
  au BufNewFile,BufRead *.mesos set filetype=python syntax=python
  au BufNewFile,BufRead *BUILD* set filetype=python syntax=python
  au BufRead,BufNewFile *.md set filetype=markdown syntax=markdown
  au BufRead,BufNewFile README set filetype=markdown syntax=markdown
  au BufRead,BufNewFile *.proto set filetype=proto

  au BufRead,BufNewFile *.ml       set filetype=ocaml
  au BufRead,BufNewFile *.hs       set filetype=haskell
  au BufRead,BufNewFile *.pp       set filetype=puppet syntax=puppet
  au BufRead,BufNewFile *.rb       set filetype=ruby syntax=ruby
  au BufRead,BufNewFile *.py       set filetype=python syntax=python
  au BufNewFile,BufRead *.go       set filetype=go syntax=go
  au BufNewFile,BufRead *.sbt      set filetype=scala syntax=scala
  au BufNewFile,BufRead *.js       set filetype=javascript syntax=javascript

  au BufNewFile,BufRead *.pu       set filetype=plantuml syntax=plantuml
  au BufNewFile,BufRead *.plantuml set filetype=plantuml syntax=plantuml
  au BufNewFile,BufRead *.uml      set filetype=plantuml syntax=plantuml
augroup END

autocmd FileType cpp,c,go,haskell,python setlocal expandtab list! tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType java,js,ruby,scala setlocal expandtab list! tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType python,apache setlocal commentstring=#\ %s "foldmethod=syntax
autocmd FileType css  setlocal shiftwidth=2 tabstop=2 foldmethod=indent

autocmd FileType go set smartindent autoindent
au BufNewFile,BufRead *.go setlocal commentstring=//\ %s
autocmd FileType go setlocal expandtab list! tabstop=4 shiftwidth=4 softtabstop=4 "foldmethod=syntax

"<rust>
let g:rustfmt_autosave = 1
let g:racer_cmd = "~/.cargo/bin/racer"
let g:racer_experimental_completer = 1
"</rust>

autocmd BufRead *.py set cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd BufRead *.py set nocindent smartindent autoindent
autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``

autocmd BufRead,BufNewFile *.json set filetype=json
autocmd FileType json setlocal expandtab autoindent formatoptions=tcq2l
autocmd FileType json setlocal textwidth=78 shiftwidth=2 softtabstop=2 tabstop=8 foldmethod=syntax

"" preview uml using plantuml
autocmd FileType plantuml nnoremap <buffer> <leader>m :!java -jar ~/bin/plantuml.jar --tpng -o %:p:h %<cr><cr>
"" preview markdown
autocmd FileType markdown map <leader>m :MarkdownPreview default<CR>

command! FRB set filetype=ruby
command! FPY set filetype=python

"" ctags supports: Ant Assembler ASP Awk BASIC BETA C C++ C# COBOL DOS Batch Eiffel
"" Erlang Flex Fortran HTML Java JavaScript Lisp Lua Make MATLAB Objective Caml Pascal
"" Perl PHP PL/SQL Python (Pyrex/Cython) REXX Ruby Scheme Shell scripts (Bourne/Korn/Z)
"" S-Lang SML (Standard ML) Tcl TeX Vera Verilog VHDL Vim YACC
map <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
""" Ctl+] to jump to definition of on-cursor tag
""" Ctl+t to jump back to on-cursor tag
""" g+Ctl+t to jump for ambiguous tag
""au BufWritePost *.go silent! !~/.vim/bin/gotags -sort -silent . > /dev/null
"" "au BufWritePost *.go silent! !ctags -R --fields=+iaS --extra=+q --go-types=fvt .
""au BufWritePost *.cpp,*.c,*.h,*.hpp silent! !ctags -R --fields=+iaS --extra=+q .
""au BufWritePost *.java,*.xml silent! !ctags -R --fields=+iaS --extra=+q .
""au BufWritePost *.py,*.rb silent! !ctags -R --fields=+iaS --extra=+q .
""au BufWritePost *.asm,*.awk,*.sh silent! !ctags -R --fields=+iaS --extra=+q .
""au BufWritePost *.html,*.js silent! !ctags -R --fields=+iaS --extra=+q .

"reselect visual block after indent/outdent "credits: http://vimbits.com/bits/20
vnoremap < <gv
vnoremap > >gv

"easy split nav "credits: http://vimbits.com/bits/10
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" move to home and end
inoremap <C-a> <Home>
inoremap <C-e> <End>

" press leader + tab to move through split windows
nmap <Leader><tab> <C-w>w
nmap <Leader><up> <C-w>k
nmap <Leader><down> <C-w>j
nmap <Leader><left> <C-w>h
nmap <Leader><right> <C-w>l

nmap <Leader>] :tabnext
nmap <Leader>[ :tabprevious

" select all "credits: http://vimbits.com/bits/82
map <Leader>a ggVG

" remove trailing whitespace :NOTRAIL
command! -range=% NOTRAIL mark ` | execute <line1> . ',' . <line2> . 's/\s\+$//' | normal! ``

" 80 characters line coloring "credits: http://vimbits.com/bits/13
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Highlight word at cursor without changing position "credits: http://vimbits.com/bits/19
nnoremap <Leader>hl *<C-O>
" Highlight word at cursor and then Ack it.
nnoremap <Leader>ack *<C-O>:AckFromSearch!<CR>

nnoremap <Leader>t :tab <C-O>

" Disable stupid backup and swap files - they trigger too many events for file system watchers
set nobackup
set nowritebackup
set noswapfile

"""""""<pathogen>
call pathogen#infect()
"""""""</pathogen>

"""""""<neocomplete>>
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

"" vim-marching for Clang
let g:marching_clang_command = "/usr/bin/env clang"
let g:marching_enable_neocomplete = 1

"" necoghc for Haskell " Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
"""""""</neocomplete>>

colorscheme PaperColor " could type ':color <_TAB_>' to weigh options
"let g:airline_theme='PaperColor'

"""""""<powerline>
set rtp+=$HOME/.virtualenvs/anon/lib/python2.7/site-packages/powerline/bindings/vim
"""""""</powerline>

"""""""<go-vim>
let g:go_fmt_fail_silently = 0
let g:gofmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_term_enabled = 1
let g:go_snippet_engine = "neosnippet"
let g:go_fmt_autosave = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

au FileType go nmap <Leader>gm <Plug>(go-rename)
au FileType go nmap <Leader>gs <Plug>(go-def-split)
au FileType go nmap <Leader>gv <Plug>(go-def-vertical)
au FileType go nmap <Leader>gi <Plug>(go-info)
au FileType go nmap <Leader>gl <Plug>(go-metalinter)
au FileType go nmap <leader>gr  <Plug>(go-run)
au FileType go nmap <leader>gb  <Plug>(go-build)
au FileType go nmap <leader>gt  <Plug>(go-test)
au FileType go nmap <leader>gdt  <Plug>(go-test-compile)
au FileType go nmap <Leader>gd <Plug>(go-doc)


" I like these more!
augroup go
  autocmd!
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
augroup END
"""""""</go-vim>

"""""""<haskell-vim>
let g:haskell_enable_quantification = 1
let g:haskell_enable_recursivedo = 1
let g:haskell_enable_arrowsyntax = 1
let g:haskell_enable_pattern_synonyms = 1
let g:haskell_enable_typeroles = 1
let g:haskell_enable_static_pointers = 1

au BufWritePost *.hs GhcModCheck
"""""""</haskell-vim>

"""""""<easytags>
"" to jump to tag 'CTRL+]', open definition in a horizontal tab 'Ctrl+W Ctrl+]'
"" to jump back CTRL+t
"" goto next,previous,list-all definition of last tag ':tn', ':tp', ':ts'
" open definition in a new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" open definition in a vertical tab
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>


" moving tags to project location, from where vim started to control file size
set tags=./tags,tags;$HOME
"""""""</easytags>

"""""""<tagbar>
" moving tags to project location, from where vim started to control file size
nmap <Leader><F8> :TagbarToggle<CR>

"" .vim/bin/gotags is from 'https://github.com/jstemmer/gotags'
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
      \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

" open all files tagged in project as list
" Netrw Style Listing
"let g:netrw_banner = 0 "disable banner
let g:netrw_liststyle = 3 "tree view
"let g:netrw_browse_split = 4 "open in prior window
let g:netrw_altv=1 "open splits to the right
"let g:netrw_list_hide=netrw_gitignore#Hide()
"let g:netrw_list_hide=',\(^\|\s\s\)\zs\.\S\+'
nnoremap <Leader><F9> :Tlist<CR><C-W>h<C-W>s:e .<CR><C-W>l:let g:netrw_chgwin=winnr()<CR><C-W>h


"""""""</tagbar>

"""""""<github.com:fatih>

" Fast saving
nnoremap <leader>w :w!<cr>
nnoremap <silent> <leader>q :q!<CR>

" Remove search highlight
nnoremap <leader><space> :nohlsearch<CR>

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
if !has('gui_running')
  set notimeout
  set ttimeout
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif
"""""""</github.com:fatih>

" Do not show stupid :wq window
map q: :q
map :qw :wq
map :Wq :wq
map :WQ :wq

filetype on
filetype plugin indent on         " required! Turn on file type detection.
syntax on
scriptencoding utf-8

command! W write " Write on :W, too.
command! E edit " Edit on :E, too.

" ==================== completion and snippet =========================
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3

if !exists('g:neocomplete#sources')
  let g:neocomplete#sources = {}
endif
let g:neocomplete#sources._ = ['buffer', 'member', 'tag', 'file', 'dictionary']
let g:neocomplete#sources.go = ['omni']

" reactJS
let g:syntastic_javascript_checkers = ['eslint']

" disable sorting
call neocomplete#custom#source('_', 'sorters', [])
" I want to use my tab more smarter. If we are inside a completion menu jump
" to the next item. Otherwise check if there is any snippet to expand, if yes
" expand it. Also if inside a snippet and we need to jump tab jumps. If none
" of the above matches we just call our usual 'tab'.
function! s:tab_complete()
  if pumvisible()
    return "\<c-n>"
  endif

  if neosnippet#expandable_or_jumpable()
    return "\<Plug>(neosnippet_expand_or_jump)"
  endif

  return "\<tab>"
endfunction
imap <silent><expr><TAB> <SID>tab_complete()

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

smap <expr><tab> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

""init replace for word under cursor
:nnoremap <Leader>s :%s/<C-r><C-w>/<C-r><C-w>/gc
"" init replace forvisually selected
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

autocmd InsertLeave * NeoSnippetClearMarkers


"" plugin: vim-multiple-cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-m>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'


"""""""ABK new

"" built-in file finder
""" search into all subdirs of subdirs.. `:find filenameOrPattern`
set path+=**
set wildmenu ""display all matching files on tab completion
""open new split window and init find *
:nnoremap <Leader>p :Sex<CR>:find *

"" custome snippets
nnoremap ,html :-1read $HOME/.vim/snippets/skeleton.html.snip<CR>3jwf>a
"" different snippets activating only in filetype for similar use-case by same shortcut
autocmd Filetype ruby nnoremap ,d :-1read $HOME/.vim/snippets/pry.rb.snip<CR>
autocmd Filetype python nnoremap ,d :-1read $HOME/.vim/snippets/pdb.py.snip<CR>
autocmd Filetype go nnoremap ,e :-1read $HOME/.vim/snippets/if-err-not-nil.go.snip<CR>jwi
autocmd Filetype go nnoremap ,t O<esc>:read $HOME/.vim/snippets/test-func.go.snip<CR>jwi

""" under trial


"" http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim
""""" CHEATSHEET FOR SELECTION (http://stackoverflow.com/a/1218429)
"" v%, vib  : if cursor is on starting/ending parenthesis and if inside block
"" vi", vi' : for double quotes and for single quotes
"" viB, vi{ : to select a curly brace block
"" ggVG     : entire file
""

""""" CHEATSHEET (keep revising full : http://vim.wikia.com/wiki/Best_Vim_Tips)
"" :Ex     : file explorer note capital Ex
"" \be     : show buffer explorer (requires plugin)
"" :ls     : list of buffers(eg following)
"" :cd ..  : move to parent directory
"" guu     : lowercase line
"" gUU     : uppercase line
"" ~       : invert case (upper->lower; lower->upper) of current character
"" gf      : open file name under cursor (SUPER)
"" ga      : display hex, ascii value of character under cursor
"" g8      : display hex value of utf-8 character under cursor
"" ggg?G   : rot13 whole file
"" xp      : swap next two characters around
"" CTRL-A,CTRL-X : increment, decrement next number on same line as the cursor
"" CTRL-R=5*5    : insert 25 into text
"" =             : (re)indent the text on the current line or on the area selected (SUPER)
"" =%            : (re)indent the current braces { ... }
"" G=gg          : auto (re)indent entire document

""""" CHEATSHEET (verbs)
"" d : Delete
"" c : Change
"" > : Indent
"" < : Outdent
"" v : Visually Select
"" y : Yank
""

""""" CHEATSHEET (motion), these can be paired with verbs
"" f<char>       : takes cursor to occurence
"" t<char>       : takes cursor before occurence
"" /<string>     : find a string
"" H             : High, move cursor to top of current page
"" M             : Medium, move cursor to middle of current page
"" L             : Low, move cursor to bottom of current page
"" w,b           : ahead a word, back a word
"" h,j,k,l       : left,down,up,right (so 2j means 2 lines down)
""

""""" CHEATSHEET (speed-up)
"" . : (dot) repeat previous command
"" cf<char>      : removes text to occurence
"" ct<char>      : removes text upto occurence
"" ct/<string>   : removes text upto occurence of search string
"" :-16,-14co.   : copy from line -16 to -14 to current
""
"" ys2w"         : surround 2 words with "\""; ys motion or text-object; 2w & "\""
""

""""" CHEATSHEET (plugin-verbs)
"" ds<NOUN|MOTION> : delete surround
"" cs<NOUN|MOTION> : change surround
"" cm<NOUN|MOTION> : commentary
""

""""" Insert mode
"" <C-o> to utilize normal mode vim commands in insert mode right after

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""" Vim Text Objects
""""" CHEATSHEET (nouns), these can be paired with verbs
"" aw : a word including whitespaces surrounding it; (daw) deleting a word with space
"" iw : inner word (works from anywhere in word); so 'diw' will delete a word
""
"" as : a sentence
"" is : inner sentence; (cis) del+insert inner sentence
""
"" ap : a paragraph
"" ip : inner paragraph
""
"" " if cursor is not within, applies 'verb' on first instance of 'text object'
"" a" : a double quoted string
"" i" : inner double quoted string
"" a' : a single quoted string
"" i' : inner single quoted string
"" a` : a back quoted string
"" i` : inner back quoted string
""
"" a) : a parenthesized string; also 'ab'
"" i) : inner parenthesized string; also 'ib'
"" a} : a curly braced string
"" i} : inner curly braced string
"" a] : a bracketed string; also 'aB'
"" i] : inner bracketed string; also 'iB'
"" 'c%' = 'ca?'; ? can be '),},]' when cursor on opening/closing paranthesis
""
"" a> : a single tag (HTML Tag contents); also 'at'
"" i> : inner single tag (HTML Tag contents); also 'it'
""
"" a,w : a CamelCaseMotion to move by words within a camel or snake cased word
"" i,w : a CamelCaseMotion to move by words within a camel or snake cased word
""
"" aa : an argument
"" ia : inner argument
""
"" ai : all indent, current indetation and line above
"" ii : inner indent, current indetation excluding line above
""
"" ae : all entire
""
"" il : inner line
"" al : including text without new-line char
""
"" ar : a ruby block, any expression closed with 'end'
"" ir : inner ruby block
""
""
""
"" :e | :edit : re-read current state of file
"" :checktime : check if any buffer were changed outside vim to avoid two versions of file
""
""
""
"" `:ls` to show files held in memory... can jump to other file by `:b uniqFilePattern`
""
""
"" auto-complete, ':help ins-completion'
""" Ctl+x,Ctl+n for just THIS file
""" Ctl+x,Ctl+i for current and included files
""" Ctl+x,Ctl+f for filenames, works with path tricks
""" Ctl+x,Ctl+] for tags only
""" Ctl+n for anything specifed by complete option
""" Ctl+x,s for spelling suggestion
"""
""" Ctl+n(ext) and Ctl+p(revious) to go back and forth in suggestion list
""
""
"" :help netrw-browse-maps
""" :edit <dirname> ~ open explorer there
""" Super(command) + v ~ vertical split open
""" Super(command) + t ~ tab split open
""
""
"" 'set showcmd' to show commands while being typed... so people watching know
""
""
"" Vim needs make output as QuickFixFormatter
"" for a filetype set 'set makeprg=bundle\ exec\ rspec\ -f\ QuickFixFormatter'
"" now can run ':make' to run build
"" ':cl' to list errors
"" ':cc#' to jump to error by number
"" ':cn' and ':cp' to navigate next and previous
""
""
"" copy+paste registers
""" by default gets used default register
""" can shuffle in named double-quote register like
""" '"byy' '"cyy' '"bp' '"cp' to manage to set of copy paste across
""
""
"" :help mode_^char like ':help i_^n'
"" :helpgrep term
""
""
"" plugin: vim-multiple-cursors
"" <ctrl+n>: select virtual word(s)
"" <ctrl+p>: deselect newly selected virtual word and move to previous, customized to <ctrl+m> here
"" <ctrl+x>: skip current virtual word selection, move to next
""
"" searching for specific case-sensitive, need something like '/searchTerm\C'
"" searching for specific case-insensitive, need '/searchTerm\c'
""
